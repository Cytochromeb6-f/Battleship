<script src="https://koda.nu/simple.js">
  
  /////////////////setMagnitude trasig
  
  /////Variabeldeklarationer
  var OcDe=0.1
  
  const initialShipCount = 1
 
  function Ship(x,y)
  {
      this.x = x || random(0,totalWidth), 
      this.y = y || random(0,totalHeight),
      this.z = 0, this.heading = new Vector(1,0),
      this.velocity = new Vector(),
      this.l = 50, this.w = 10,  this.c = "black",
      this.P = 70, this.m = 200, this.cargo = []
      this.ld= 0, this.wd= 0, this.nd= 0
  }
  var ship = []
  for(i=0; i<initialShipCount; i++){ship.push(new Ship)}
  
  /////Vektorklass
  function Vector(x,y)
  {
    this.x = x || 0
    this.y = y || 0
    
    this.direction = function(){return Math.atan2(this.y, this.x)}
    this.magnitude = function(){return (this.x**2+this.y**2)**0.5}
    this.dotProd = function(vect2){return this.x*vect2.x+this.y*vect2.y}
    
    this.setDirection = function(a){this.x=this.magnitude()*cos(a);
                                    this.y=this.magnitude()*sin(a)}
    this.setMagnitude = function(m){this.x=m*cos(this.direction());
                                    this.y=m*sin(this.direction())}
    
    this.vectorAdd = function(vector)
    {
      this.x+=vector.x;this.y+=vector.y
      return this
    }
    this.scalarM = function(scalar)
    {
      this.x*=scalar;this.y*=scalar
      return this
    }
    this.lengthen = function(l)
    {
      Math.max(0,this.setMagnitude(this.magnitude()+l))
      return this
    }
    this.rotate = function(a)
    {
      this.setDirection(this.direction()+a)
      return this
    }
  }
  
  
  
  
  
  /////Funktioner
  
  
  
    
  ////Bromskraftsfunktion
  function dragForce(ship)
  {
    ///Ytvattenmotstånd
    if(ship.z==0)
    { 
      lengthDrag = new Vector(0,Math.sign(sin(ship.heading.direction()-
                                            ship.velocity.direction())))
      lengthDrag.rotate(ship.heading.direction())
      lengthDrag.scalarM(ship.velocity.magnitude()**2*OcDe*ship.l*
                              abs(sin(ship.heading.direction()-
                              ship.velocity.direction()))/ship.m/
                              updatesPerSecond)
      
      
      widthDrag = new Vector()
      widthDrag.setMagnitude(ship.velocity.magnitude()**2*OcDe*ship.w*
                              abs(cos(ship.heading.direction()-
                              ship.velocity.direction()))/ship.m/
                              updatesPerSecond)
      if(cos(ship.heading.direction()-ship.velocity.direction())<0)
      {
        widthDrag.setDirection(ship.heading.direction())
      }
      else{widthDrag.setDirection(ship.heading.direction()+pi)}
      
      netDrag = lengthDrag.vectorAdd(widthDrag)
        
      //ship.velocity.vectorAdd(lengthDrag.vectorAdd(widthDrag))
      
      ship.ld = lengthDrag
      ship.wd = widthDrag
      ship.nd = new Vector(1,1)//netDrag
      
      
      /*ship.velocity.lengthen(-
					Math.max(0,ship.velocity.magnitude()**2*OcDe*
                 	(ship.l*abs(sin(ship.heading.direction()-
                                    ship.velocity.direction()))
                     /ship.m/updatesPerSecond)))
      
      ship.velocity.lengthen(-
					Math.max(0,ship.velocity.magnitude()**2*OcDe*
                 	(ship.w*abs(cos(ship.heading.direction()-
                                    ship.velocity.direction()))
                     /ship.m/updatesPerSecond)))*/
    }
  }
 
  
  ////Rörelsefunktioner
  function accelerate(ship)
  {
    forceVector = new Vector()
    forceVector.setMagnitude(ship.P/ship.m)
    forceVector.setDirection(ship.heading.direction())
    ship.velocity.vectorAdd(forceVector) 
  }
  
  function turnLeft(ship)
  {
    ship.heading.rotate(-ship.P*16000/(ship.l**2*pi*ship.m*
                                      updatesPerSecond))
  }
  
  function turnRight(ship)
  {
    ship.heading.rotate(ship.P*16000/(ship.l**2*pi*ship.m*
                                      updatesPerSecond))
  }
  
  /////Startekvens
  
    
  ship[0].x = totalWidth/2
  ship[0].y = totalHeight/2
  
  
  /////Huvudloop
  updatesPerSecond = 60
  function update()
  {
    
    ////Kinematik    
    for(i=0; i<ship.length; i++)
    {
      ship[i].x += ship[i].velocity.x/updatesPerSecond
      ship[i].y += ship[i].velocity.y/updatesPerSecond
    
      ///Vattenmotstånd
      
      dragForce(ship[i])
      
      
      
      //ship[i].v -= Math.max(0,ship[i].v**2*OcDe*ship[i].w*
      //cos(ship[i].da-ship[i].va)/ship[i].m/updatesPerSecond)*/
      
      
      
      /*//Kollision
      
      
        
      xi1=-ship[i].w/2
      xi2=ship[i].w/2
       
      yi1=-ship[i].l/2
      yi2=ship[i].l/2
      
      i1=rotate(xi1,yi1,ship[i].x, ship[i].y,-ship[i].da)
      i2=rotate(xi2,yi2,ship[i].x, ship[i].y,-ship[i].da)
      
      xi1=i1[0]
      yi1=i1[1]
      
      xi2=i2[0]
      yi2=i2[1]
      
      
      m=rotate(mouse.f, mouse.y, ship[i].x, ship.y[i], -ship[i].da)
     
      mx=m[0]
      my=m[1]
      
      if((mx>xi1 && mx<xi2 && my>yi1 && my<yi2))
      {ship[i].c="blue"}
        
      
      
      
      for(j=0; j<i; j++)
      {        
        xj1=ship[j].x-(ship[j].w/2*cos(ship[j].da)+ship[j].l/
        2*sin(ship[j].da))
        xj2=ship[j].x+(ship[j].w/2*cos(ship[j].da)+ship[j].l/
        2*sin(ship[j].da))
        
        yj1=ship[j].y-(ship[j].w/2*sin(ship[j].da)+ship[j].l/
        2*cos(ship[j].da))
        yj2=ship[j].y+(ship[j].w/2*sin(ship[j].da)+ship[j].l/
        2*cos(ship[j].da))
        
        if((xi1>xj1 && xi1<xj2 && yi1>yj1 && yi1<yj2) ||
           (xi2>xj1 && xi2<xj2 && yi1>yj1 && yi1<yj2) ||
           (xi2>xj1 && xi2<xj2 && yi2>yj1 && yi2<yj2) ||
           (xi1>xj1 && xi1<xj2 && yi2>yj1 && yi2<yj2))
        {ship[i].c="blue"; ship[j].c="red"}
        
      }
      
      for(j=i+1; j<shipCount; j++)
      {        
        xj1=ship[j].x-(ship[j].w/2*cos(ship[j].da)+ship[j].l/
        2*sin(ship[j].da))
        xj2=ship[j].x+(ship[j].w/2*cos(ship[j].da)+ship[j].l/
        2*sin(ship[j].da))
        
        yj1=ship[j].y-(ship[j].w/2*sin(ship[j].da)+ship[j].l/
        2*cos(ship[j].da))
        yj2=ship[j].y+(ship[j].w/2*sin(ship[j].da)+ship[j].l/
        2*cos(ship[j].da))
        
        if((xi1>xj1 && xi1<xj2 && yi1>yj1 && yi1<yj2) ||
           (xi2>xj1 && xi2<xj2 && yi1>yj1 && yi1<yj2) ||
           (xi2>xj1 && xi2<xj2 && yi2>yj1 && yi2<yj2) ||
           (xi1>xj1 && xi1<xj2 && yi2>yj1 && yi2<yj2))
        {ship[i].c="blue"; ship[j].c="red"}
        
      }*/
      
      
    }
    
    ///Spelarkontroll
    if(keyboard.w==true){accelerate(ship[0])}
    if(keyboard.a==true){turnLeft(ship[0])}
    if(keyboard.d==true){turnRight(ship[0])}
    
    if(keyboard.up==true){accelerate(ship[1])}
    if(keyboard.left==true){turnLeft(ship[1])}
    if(keyboard.right==true){turnRight(ship[1])}
    
    if(keyboard.enter){stopUpdate()}
    
    
    ////Grafik
    clearScreen()
    
   
    
    for(i=0; i<ship.length; i++)
    {
    
      line(ship[i].x-ship[i].l/2*cos(ship[i].heading.direction()), 
           ship[i].y-ship[i].l/2*sin(ship[i].heading.direction()),
           ship[i].x+ship[i].l/2*cos(ship[i].heading.direction()),
           ship[i].y+ship[i].l/2*sin(ship[i].heading.direction()),
           ship[i].w, ship[i].c)
      
      line(ship[i].x, ship[i].y, ship[i].x+ship[i].velocity.x, 
           ship[i].y+ship[i].velocity.y, 2, "red")
      
      line(ship[i].x, ship[i].y, ship[i].x+ship[i].ld.x*1000, 
           ship[i].y+ship[i].ld.y*1000, 2, "blue")
      
      line(ship[i].x, ship[i].y, ship[i].x+ship[i].wd.x*1000, 
           ship[i].y+ship[i].wd.y*1000, 2, "green")
      
      line(ship[i].x, ship[i].y, ship[i].x+ship[i].nd.x*1000, 
           ship[i].y+ship[i].nd.y*1000, 2, "orange")
      
      
      
      
      text(ship[i].x, ship[i].y, 20, i, "green")
    }
    
    
    A = new Vector(1,1)
    A.setMagnitude(4)
    X=6
    Y=2
    
    A = atan(Y/X)
    X = cos(atan(Y/X))
    Y = sin(atan(Y/X))
    B = atan(Y/X)
    
    
    ////Diagnostik
    text(100, 100, 20, floor(ship[0].x), "red")
    text(100, 120, 20, floor(ship[0].y), "red")
    text(100, 140, 20, floor(ship[0].velocity.x), "red")
    text(100, 160, 20, floor(ship[0].velocity.y), "red")
    text(100, 180, 20, ship[0].ld.magnitude(), "red")
    text(100, 200, 20, ship[0].wd.magnitude(), "red")
    text(100, 220, 20, A, "red")
    text(100, 240, 20, B, "red")
    
    
    
    //circle(xi1, yi1, 4, "blue")
    //circle(xi2, yi2, 4, "red")
    
    
    
    
  
  }
  
 

</script>
